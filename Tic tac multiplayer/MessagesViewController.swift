//
//  MessagesViewController.swift
//  Tic tac multiplayer
//
//  Created by Sem Pruijs on 11/06/2019.
//  Copyright Â© 2019 Sem Pruijs. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        board = emptyBoardThree()
        hasWonLabel.text = ""
        for button in buttons {
            button.setImage(nil, for: UIControl.State.normal)
        }
    }
    
    @IBOutlet var buttons: [UIButton]!
    @IBOutlet weak var hasWonLabel: UILabel!
    
    @IBAction func buttons(_ sender: UIButton) {
        let row = sender.tag / 3
        let column = sender.tag % 3
        let imageName = whoIs == .ring ? "ring.png" : "cross.png"
        
        if playerHasWon() == nil {
            if board[row][column] == nil {
                sender.setImage(UIImage(named: imageName), for: UIControl.State.normal)
                printCircelOrCross(row: row, column: column)
                renderBoard()
                print(printWinner())
                hasWonLabel.text = printWinner()
            }
        }
        if draw() {
            hasWonLabel.text = "it's draw"
        }
        
        let layout = MSMessageTemplateLayout()
        layout.caption = "your turn"
        layout.image = UIImage(named: "Untitled.png")
        
        let message = MSMessage()
        message.layout = layout
        
        activeConversation?.insert(message, completionHandler: nil)
    }
    
    
    
    
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
